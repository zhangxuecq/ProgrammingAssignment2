a<-available.packages()
head(rownames(a),5)
View(a)
View(a)
installed.packages("KernSmooth")
library(KernSmooth)
exit
3+2
exit
quit
getwd()
dir()
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
?sample
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
rm(list=ls())
a <- 1:100
q()
a <- 1:100
q()
library
?library
?install.packages
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,6)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf"")
fd
g
2
==
<-
fffg个
names <-
""
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
vect
vect$foo
vect$"foo"
vect$1
my_matrix <- rbind(vect,vect2)
my_matrix
my_matrix$foo
list(vect,vect2)
l <- list(vect,vect2)
l$foo
l$bar
l
l <- list(foo = 1:4,bar="hello")
l
l&bar
l$bar
rm(list=ls())
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(c(1:20),nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10=<10
10<=10
5！=7
5!=7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8|| 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- samples(10)
1==1.0
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
q()
?seq_along
seq_along(3)
seq_along(3,4)
seq_along(1)
seq_along(5)
x <- c(1,2,3,4,5)
seq_along(x)
?rbinom
?numeric
?mean
?removeNA
search()
?lm
quit()
?rnorm
libaray(swirl)
library(swirl)
swirl()
q（）
q()
?runif
x <- 1:4
lapply(x,runif)
?lapply
?apply
x <- martrix (rnorm(200),20,10)
x <- matrix (rnorm(200),20,10)
apply(x,1,mean)
apply(x,2,mean)
apply(x,(1,2),mean)
apply(x,c(1,2),mean)
x
rowSums(x)
?quantile
?rowMeans
x <- array(rnorm(40),2,2,10)
x <- array(rnorm(40),c(2,2,10))
x
rowMeans(x)
rowMeans(x,dims=2)
x <- array(rnorm(60),c(2,3,10))
rowMeans(x)
rowMeans(x,dims=2)
a <- rowMeans(x,dims=2)
View(a)
rowMeans(a)
rowMeans(a,dims=2)
?tapply
?gl
?tapply
?gl
?invisible
?cat
?unclass
x <- list(c(1,2,3),c('a','b','c'))
x
class(x)
unclass(x)
y <- unclass(x)
class(y)
class(x) <- "myclass"
class(x)
y <- unclass(x)
class(y)
y
x
x
?lm
?str
library(datasets)
data("iris")
?iris
data(iris)
View(iris)
s <- split(iris,iris$Species)
lapply(s$virginica$Sepal.Length,mean)
lapply(s,function(x) colMeans(x[,Sepal.Length]))
lapply(s$virginica,function(x) colMeans(x[,Sepal.Length]))
lapply(s$virginica,function(x) colMeans(x$Sepal.Length))
s$virginica
x <- s$virginica
x$Sepal.Length
colMeans(x)
mean(x$Sepal.Length)
lapply(s$virginica,function(x) colMeans(x[,"Sepal.Length"]))
lapply(s$virginica,function(x) colMeans(x[,"Sepal.Length","Sepal.Width"]))
lapply(s$virginica,function(k) colMeans(k[,"Sepal.Length","Sepal.Width"]))
View(x)
colMeans(x[,"Sepal.Length","Sepal.Width"]
)
colMeans(x[,"Sepal.Length","Sepal.Width"])
colMeans(x)
x[,"Sepal.Length"]
colMeans(x[,"Sepal.Length"])
colMeans(x[,"Sepal.Length","Sepal.Width"])
colMeans(x[,c("Sepal.Length","Sepal.Width")])
lapply(s$virginica,function(k) colMeans(k[,c("Sepal.Length","Sepal.Width")]))
lapply(s$virginica,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
x[,c("Sepal.Length","Sepal.Width")]
lapply(s,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
data(mtcars)
?mtcars
rm(iris)
rm(x)
rm(x)
rm(a)
rm(s)
rm(y)
View(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
x <- tapply(mtcars$hp,mtcars$cyl,mean)
x$8
x[8]
x
x["8"]
x["8"]-x["4"]
debug(ls)
ls
ls
debug(ls)
ls()
exit
ls()
f
quit()
setwd("~/github/ProgrammingAssignment2")
?<<-
?<<-()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
x <- 1:10
makeVector(x)
getman
getmean
getmean()
makeVector(x)$getmean
m
x=numeric()
x
x <- 1:10
makeVector(x)
get()
get(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x)
cachemean(x)
cachemean(makeVector())
y <- makeVector(x)
cachemean(y)
y <- makeVector(x)
y$getmean
y$getmean(x)
y$setmean
y$setmean(x)
y$getmean
y$get()
y <- makeVector()
y$set(x)
y$get()
y$setmean(mean)
y$getmean()
y$setmean(mean(x))
y$getmean()
cachemean(y)
k <- 1:20
y <- makeVector()
y$set(k)
cachemean(y)
x <- matrix(1:16,4,4)
View(x)
solve(x)
x[2,3]=5
solve(x)
x[4,4]=9
solve(x)
